{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap fa84ae96920ebc06a016","webpack:///./src/animation.js","webpack:///./src/timeline.js","webpack:///./src/imageloader.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;ACtCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;;AAEA;AACA;AACA;;;;;;;;;;;AC9UA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAA+E;AAC/E;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED,2B;;;;;;;;;AC3HA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"animation.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"animation\"] = factory();\n\telse\n\t\troot[\"animation\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fa84ae96920ebc06a016\n **/","'use strict';\n\nvar Timeline = require('./timeline');\nvar loadImage = require('./imageloader');\n\n//初始化状态\nvar STATE_INITIAL = 0;\n//开始状态\nvar STATE_START = 1;\n//停止状态\nvar STATE_STOP = 2;\n\n//同步任务\nvar TASK_SYNC = 0;\n//异步任务\nvar TASK_ASYNC = 1;\n\n\n/**\n * 简单的函数封装，执行callback\n * @param callback 执行的函数\n */\nfunction next(callback) {\n\tcallback && callback();\n}\n\n/**\n * 帧动画库类\n * @constructor\n */\nfunction Animation() {\n\tthis.taskQueue = [];\n\tthis.timeline = new Timeline();\n\tthis.state = STATE_INITIAL;\n\tthis.index = 0;\n}\n\n/**\n * 添加一个同步任务，预加载图片\n * @param imglist 图片数组\n */\nAnimation.prototype.loadImage = function (imglist) {\n\n\tvar taskFn = function (next) {\n\t\tloadImage(imglist.slice(), next);\n\t\timglist = null;\n\t};\n\tvar type = TASK_SYNC;\n\n\treturn this._add(taskFn, type);\n};\n\n/**\n * 添加一个异步定时任务，通过定时改变图片背景位置，实现帧动画\n * @param ele dom对象\n * @param positions 背景位置数组\n * @param imageUrl 图片地址\n */\nAnimation.prototype.changePosition = function (ele, positions, imageUrl) {\n\tvar len = positions.length;\n\tvar taskFn;\n\tvar type;\n\tif (len) {\n\t\tvar me = this;\n\t\ttaskFn = function (next, time) {\n\t\t\t//如果指定图片，则设置dom对象的背景图片地址\n\t\t\tif (imageUrl) {\n\t\t\t\tele.style.backgroundImage = 'url(' + imageUrl + ')';\n\t\t\t}\n\t\t\t//获得当前背景图片位置索引\n\t\t\tvar index = Math.min(time / me.interval | 0, len - 1);\n\t\t\tvar position = positions[index].split(' ');\n\t\t\t//改变dom对象的背景图片位置\n\t\t\tele.style.backgroundPosition = position[0] + 'px ' + position[1] + 'px';\n\t\t\t//当前任务执行完毕\n\t\t\tif (index === len - 1) {\n\t\t\t\tnext();\n\t\t\t}\n\t\t};\n\t\ttype = TASK_ASYNC;\n\t} else {\n\t\ttaskFn = next;\n\t\ttype = TASK_SYNC;\n\t}\n\n\treturn this._add(taskFn, type);\n\n};\n\n/**\n * 添加一个异步定时任务，通过定时改变背景图片地址，实现帧动画\n * @param ele dom(Image对象)\n * @param imglist 图片地址数组\n */\nAnimation.prototype.changeSrc = function (ele, imglist) {\n\tvar len = imglist.length;\n\tvar taskFn;\n\tvar type;\n\tif (len) {\n\t\tvar me = this;\n\t\ttaskFn = function (next, time) {\n\t\t\t//获得当前的图片索引\n\t\t\tvar index = Math.min(time / me.interval | 0, len - 1);\n\t\t\t//改变image对象的图片地址\n\t\t\tele.src = imglist[src];\n\t\t\t//当前任务执行完毕\n\t\t\tif (index === len - 1) {\n\t\t\t\tnext();\n\t\t\t}\n\t\t};\n\t\ttype = TASK_ASYNC;\n\t} else {\n\t\ttaskFn = next;\n\t\ttype = TASK_SYNC;\n\t}\n\n\treturn this._add(taskFn, type);\n};\n\n/**\n * 高级用法，添加一个异步定时执行的任务，\n * 该任务自定义动画每帧执行的任务函数\n * @param taskFn 每帧执行的任务函数\n */\nAnimation.prototype.enterFrame = function (taskFn) {\n\treturn this._add(taskFn, TASK_ASYNC);\n};\n\n/**\n * 添加一个同步任务，可在上一个任务完成执行回调函数\n * @param callback 回调函数\n */\nAnimation.prototype.then = function (callback) {\n\tvar taskFn = function (next) {\n\t\tcallback();\n\t\tnext();\n\t};\n\tvar type = TASK_SYNC;\n\n\treturn this._add(taskFn, type);\n};\n\n/**\n * 开始执行任务\n * @param interval 异步定时任务执行的间隔\n */\nAnimation.prototype.start = function (interval) {\n\t//如果任务已经开始，则返回\n\tif (this.state === STATE_START)\n\t\treturn this;\n\tthis.state = STATE_START;\n\t//如果任务链中没有任务，则返回\n\tif (!this.taskQueue.length)\n\t\treturn this;\n\tthis.interval = interval;\n\tthis._runTask();\n\treturn this;\n};\n\n/**\n * 添加一个同步任务，该任务就是回退到上一个任务中，\n * 实现重复上一个任务的效果，可定义重复的次数。\n * @param times 重复次数\n */\nAnimation.prototype.repeat = function (times) {\n\tvar me = this;\n\tvar taskFn = function () {\n\t\tif (typeof times === 'undefined') {\n\t\t\t//无限回退到上一个任务\n\t\t\tme.index--;\n\t\t\tme._runTask();\n\t\t\treturn;\n\t\t}\n\t\tif (times) {\n\t\t\ttimes--;\n\t\t\t//回退到上一个任务\n\t\t\tme.index--;\n\t\t\tme._runTask();\n\t\t} else {\n\t\t\t//达到重复执行次数，则跳转到下一个任务\n\t\t\tvar task = me.taskQueue[me.index];\n\t\t\tme._next(task);\n\t\t}\n\t};\n\tvar type = TASK_SYNC;\n\n\treturn this._add(taskFn, type);\n};\n\n/**\n * 添加一个同步任务，该任务就是无线循环上一次任务\n */\nAnimation.prototype.repeatForever = function () {\n\treturn this.repeat();\n};\n\n/**\n * 设置当前任务结束后的等待时间\n * @param time\n */\nAnimation.prototype.wait = function (time) {\n\tif (this.taskQueue && this.taskQueue.length > 0) {\n\t\tthis.taskQueue[this.taskQueue.length - 1].wait = time;\n\t}\n\treturn this;\n};\n\n/**\n * 暂停当前执行的异步定时任务\n */\nAnimation.prototype.pause = function () {\n\tif (this.state === STATE_START) {\n\t\tthis.state = STATE_STOP;\n\t\tthis.timeline.stop();\n\t\treturn this;\n\t}\n\treturn this;\n};\n\n/**\n * 重新开始执行当前异步定时任务\n */\nAnimation.prototype.restart = function () {\n\tif (this.state === STATE_STOP) {\n\t\tthis.state = STATE_START;\n\t\tthis.timeline.restart();\n\t\treturn this;\n\t}\n\treturn this;\n};\n\n/**\n * 释放资源\n */\nAnimation.prototype.dispose = function () {\n\tif (this.state !== STATE_INITIAL) {\n\t\tthis.state = STATE_INITIAL;\n\t\tthis.taskQueue = null;\n\t\tthis.timeline.stop();\n\t\tthis.timeline = null;\n\t\treturn this;\n\t}\n\treturn this;\n};\n\n/**\n * 添加一个任务到任务队列中\n * @param taskFn 任务方法\n * @param type 任务类型\n * @returns {Animation}\n * @private\n */\nAnimation.prototype._add = function (taskFn, type) {\n\tthis.taskQueue.push({\n\t\ttaskFn: taskFn,\n\t\ttype: type\n\t});\n\treturn this;\n};\n\n/**\n * 执行任务\n * @private\n */\nAnimation.prototype._runTask = function () {\n\tif (!this.taskQueue || this.state !== STATE_START)\n\t\treturn;\n\t//如果任务链任务执行完则释放资源\n\tif (this.index === this.taskQueue.length) {\n\t\tthis.dispose();\n\t\treturn;\n\t}\n\t//获得任务链上的一个任务\n\tvar task = this.taskQueue[this.index];\n\tif (task.type === TASK_SYNC) {\n\t\tthis._syncTask(task);\n\t} else {\n\t\tthis._asyncTask(task);\n\t}\n};\n\n/**\n * 同步任务\n * @param task 执行任务的函数\n * @private\n */\nAnimation.prototype._syncTask = function (task) {\n\tvar me = this;\n\tvar next = function () {\n\t\t//切换到下一个任务\n\t\tme._next(task);\n\t};\n\tvar taskFn = task.taskFn;\n\ttaskFn(next);\n};\n\n/**\n * 异步任务\n * @param task 执行异步的函数\n * @private\n */\nAnimation.prototype._asyncTask = function (task) {\n\tvar me = this;\n\t//定义每一帧执行的回调函数\n\tvar enterframe = function (time) {\n\t\tvar taskFn = task.taskFn;\n\t\tvar next = function () {\n\t\t\t//停止执行当前任务\n\t\t\tme.timeline.stop();\n\t\t\t//执行下一个任务\n\t\t\tme._next(task);\n\t\t};\n\t\ttaskFn(next, time);\n\t};\n\n\tthis.timeline.onenterframe = enterframe;\n\tthis.timeline.start(this.interval);\n};\n\n/**\n * 切换到下一个任务，如果当前任务需要等待，则延时执行\n * @param task\n * @private\n */\nAnimation.prototype._next = function (task) {\n\tvar me = this;\n\tthis.index++;\n\ttask.wait ? setTimeout(function () {\n\t\tme._runTask();\n\t}, task.wait) : this._runTask();\n};\n\nmodule.exports = function () {\n\treturn new Animation();\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/animation.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\n\nvar DEFAULT_INTERVAL = 1000 / 60;\n\nvar STATE_INITIAL = 0;\nvar STATE_STOP = 1;\nvar STATE_START = 2;\n\n/**\n * Timline时间轴类\n * @constructor\n */\nfunction Timeline() {\n\tthis.animationHandler = 0;\n\tthis.state = STATE_INITIAL;\n}\n\n/**\n * 时间轴上每一次回调执行的函数\n * @param time 从动画开始到当前执行的时间\n */\nTimeline.prototype.onenterframe = function (time) {\n};\n\n/**\n * 动画开始\n * @param interval 每一次回调的间隔时间\n */\nTimeline.prototype.start = function (interval) {\n\tif (this.state === STATE_START)\n\t\treturn;\n\tthis.state = STATE_START;\n\n\tthis.interval = interval || DEFAULT_INTERVAL;\n\tstartTimeline(this, +new Date());\n};\n\n/**\n * 重新开始动画\n */\nTimeline.prototype.restart = function () {\n\tif (this.state === STATE_START)\n\t\treturn;\n\tif (!this.dur || !this.interval)\n\t\treturn;\n\n\tthis.state = STATE_START;\n\t//重新开始动画的启示时间戳需要前移到上一次动画停止时候的时间戳\n\t//这样就可以无缝连接停止动画的状态\n\tstartTimeline(this, +new Date() - this.dur);\n};\n\n/**\n * 动画停止\n */\nTimeline.prototype.stop = function () {\n\tif (this.state !== STATE_START)\n\t\treturn;\n\tthis.state = STATE_STOP;\n\n\t//如果动画开始过，则记录动画从开始到当前所经历的时间\n\tif (this.startTime) {\n\t\tthis.dur = +new Date() - this.startTime;\n\t}\n\tcancelAnimationFrame(this.animationHandler);\n};\n\n/**\n * 时间轴动画启动函数\n * @param timeline 时间轴实例\n * @param startTime 动画开始时间戳\n */\nfunction startTimeline(timeline, startTime) {\n\t//记录上一次回调的时间戳\n\tvar lastTick = +new Date();\n\n\ttimeline.startTime = startTime;\n\tnextTick.interval = timeline.interval;\n\tnextTick();\n\n\t/**\n\t * 每一帧执行的函数\n\t */\n\tfunction nextTick() {\n\t\tvar now = +new Date();\n\n\t\ttimeline.animationHandler = requestAnimationFrame(nextTick);\n\n\t\t//如果当前时间与上一次回调的时间戳相差大于我们设置的间隔时间，表示可以执行一次回调函数。\n\t\tif (now - lastTick >= timeline.interval) {\n\t\t\ttimeline.onenterframe(now - startTime);\n\t\t\tlastTick = now;\n\t\t}\n\t}\n}\n\n/**\n * raf\n */\nvar requestAnimationFrame = (function () {\n\treturn window.requestAnimationFrame ||\n\t\twindow.webkitRequestAnimationFrame ||\n\t\twindow.mozRequestAnimationFrame ||\n\t\twindow.oRequestAnimationFrame ||\n\t\t\t//所有都不支持，用setTimeout兼容\n\t\tfunction (callback) {\n\t\t\treturn window.setTimeout(callback, (callback.interval || DEFAULT_INTERVAL)); // make interval as precise as possible.\n\t\t};\n})();\n\n/**\n * cancel raf\n */\nvar cancelAnimationFrame = (function () {\n\treturn window.cancelAnimationFrame ||\n\t\twindow.webkitCancelAnimationFrame ||\n\t\twindow.mozCancelAnimationFrame ||\n\t\twindow.oCancelAnimationFrame ||\n\t\tfunction (id) {\n\t\t\twindow.clearTimeout(id);\n\t\t};\n})();\n\nmodule.exports = Timeline;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/timeline.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar __id = 0;\n\n/**\n * 动态创建id\n * @returns {number}\n */\nfunction getId() {\n\treturn ++__id;\n}\n\n/**\n * 预加载图片函数\n * @param images 加载的图片数组或对象\n * @param callback 全部图片加载完毕后调用的回调函数\n * @param timeout 加载超时的时长\n */\nfunction loadImage(images, callback, timeout) {\n\t//加载完成图片的计数器\n\tvar count = 0;\n\t//全部图片成功加载完图片的标志位\n\tvar success = true;\n\t//超时timer的id\n\tvar timeoutId = 0;\n\t//是否加载超时的标志位\n\tvar isTimeout = false;\n\t//对图片数组（或对象）进行遍历\n\tfor (var key in images) {\n\t\t//过滤掉prototype的属性\n\t\tif (!images.hasOwnProperty(key))\n\t\t\tcontinue;\n\t\t//获得每个图片元素\n\t\t//期望格式是个object： {src:xxx}\n\t\tvar item = images[key];\n\n\t\t// 如果item是个字符传，则构造object\n\t\tif (typeof item === 'string') {\n\t\t\titem = images[key] = {\n\t\t\t\tsrc: item\n\t\t\t};\n\t\t}\n\n\t\t//如果格式不满足期望，则丢弃此条数据进行下一次遍历\n\t\tif (!item || !item.src)\n\t\t\tcontinue;\n\n\t\t//计数+1\n\t\tcount++;\n\t\t//设置图片元素的id\n\t\titem.id = \"__img_\" + key + getId();\n\t\t//设置图片元素的img，是一个Image对象\n\t\titem.img = window[item.id] = new Image();\n\n\t\tdoLoad(item);\n\t}\n\n\t//遍历完成如果计数为0，则直接调用\n\tif (!count) {\n\t\tcallback(success);\n\t}\n\t//如果设置了加载时长，则设置超时函数计时器\n\telse if (timeout) {\n\t\ttimeoutId = setTimeout(onTimeout, timeout);\n\t}\n\n\t/**\n\t * 真正进行图片加载的函数\n\t * @param item 图片元素对象\n\t */\n\tfunction doLoad(item) {\n\t\titem.status = \"loading\";\n\n\t\tvar img = item.img;\n\t\t//定义图片加载成功的回调函数\n\t\timg.onload = function () {\n\t\t\t//如果每张图片都成功才算成功\n\t\t\tsuccess = success && true;\n\t\t\titem.status = \"loaded\";\n\t\t\tdone();\n\t\t};\n\t\timg.onerror = function () {\n\t\t\t//若有一张图片加载失败，则为失败\n\t\t\tsuccess = false;\n\t\t\titem.status = \"error\";\n\t\t\tdone();\n\t\t};\n\t\t//发起一个http(s)请求加载图片\n\t\timg.src = item.src;\n\n\t\t/**\n\t\t * 每张图片加载完成的回调函数\n\t\t */\n\t\tfunction done() {\n\t\t\t//事件清理\n\t\t\timg.onload = img.onerror = null;\n\n\t\t\ttry {\n\t\t\t\t//删除window上注册的属性\n\t\t\t\tdelete window[item.id];\n\t\t\t}\n\t\t\tcatch (e) {\n\n\t\t\t}\n\t\t\t//每张图片加载完成，计数器减一，当所有图片加载完毕且没有超时的情况下，\n\t\t\t//清除超时计时器，且执行回调函数\n\t\t\tif (!--count && !isTimeout) {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\tcallback(success);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 超时函数\n\t */\n\tfunction onTimeout() {\n\t\tisTimeout = true;\n\t\tcallback(false);\n\t}\n}\n\nmodule.exports = loadImage;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/imageloader.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}