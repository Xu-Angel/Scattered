
https://juejin.im/post/5965943ff265da6c30653879

/* 在 JavaScript 中创建正则表达式有两种方式：
// 正则字面量
var pattern1 = /\d+/;

// 构造 RegExp 实例，以字符串形式传入正则
var pattern2 = new RegExp('\\d+');
复制代码两种方式创建出的正则没有任何差别。从 
!创建方式上看，正则字面量可读性更优，因为正则中经常使用 \ 反斜杠在字符串中是一个转义字符，想以字符串中表示反斜杠的话，需要使用 \\ 两个反斜杠。
 */
/* 贪婪模式，惰性模式

回溯问题？
回溯（backtracking）。**而一旦发生回溯，那其消耗的时间就会变得很长，有可能是几分钟，也有可能是几个小时，时间长短取决于回溯的次数和复杂度。
正则表达式是一个很方便的匹配符号，但要实现这么复杂，功能如此强大的匹配语法，就必须要有一套算法来实现，而实现这套算法的东西就叫做正则表达式引擎。简单地说，实现正则表达式引擎的有两种方式：
*DFA 自动机（Deterministic Final Automata 确定型有穷自动机）和
 *NFA 自动机（Non deterministic Finite Automaton 不确定型有穷自动机）。
对于这两种自动机，他们有各自的区别，这里并不打算深入将它们的原理。简单地说，DFA 自动机的时间复杂度是线性的，更加稳定，但是功能有限。而 NFA 的时间复杂度比较不稳定，有时候很好，有时候不怎么好，好不好取决于你写的正则表达式。但是胜在 NFA 的功能更加强大，所以包括 Java 、.NET、Perl、Python、Ruby、PHP 等语言都使用了 NFA 去实现其正则表达式。

作者：腾讯云加社区
链接：https://juejin.im/post/5b287ea6f265da596d04a324
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
https://juejin.im/post/5b287ea6f265da596d04a324
*/